#ifndef __PARPORT__
#define __PARPORT__

/* Структура данных содержит информацию об одном параллельном порте */
struct parport_s;
typedef struct parport_s parport_t;

/* Подготовка структуры с информацией о параллельном порте */
parport_t *parport_prepare(const char *pathname);

/* Открытие файла устройства параллельного порта, подготовка порта к работе.

   Эта операция вынесена в отдельную функцию для того, чтобы отделить
   момент подготовки списка портов от их открытия и использования.

   Подготовка списка осуществляется ведущим процессом до демонизации,
   открытие портов осуществляется ведомым процессом до сброса привилегий,
   использование портов осуществляется ведомым процессом после сброса привилегий. */
int parport_open(parport_t *parport);

/* Закрытие файла устройства параллельного порта */
int parport_close(parport_t *parport);

/* Варианты операций над текущим состоянием светодиодов */
typedef enum leds_operation_e
{
  LEDS_GET, /* Получить текущее состояние */
  LEDS_SET, /* Установить новое состояние */
  LEDS_NOT, /* Инвертировать текущее состояние */
  LEDS_OR,  /* Побитовое ИЛИ */
  LEDS_AND, /* Побитовое И */
  LEDS_XOR, /* Побитовое исключающее ИЛИ */
  LEDS_ADD, /* Сложение по модулю 0xFFF */
  LEDS_SUB, /* Вычитание по модулю 0xFFF */
  LEDS_INC, /* Инкремент по модулю 0xFFF */
  LEDS_DEC, /* Декремент по модулю 0xFFF */
  LEDS_RS,  /* Сдвиг вправо */
  LEDS_LS,  /* Сдвиг влево */
  LEDS_RCS, /* Циклический сдвиг вправо */
  LEDS_LCS  /* Циклический сдвиг влево */
} leds_operation_t;

/* Функция для манипуляции над светодиодами на параллельном порту */
int parport_leds_ctl(parport_t *parport, leds_operation_t operation, int operand);

#endif
